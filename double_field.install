<?php

/**
 * @file
 * Install, update and uninstall functions for the double field module.
 */


/**
 * Implements hook_field_schema().
 *
 * @see http://drupal.org/node/159605
 */
function double_field_field_schema($field) {

  foreach (array('first', 'second') as $subfield) {

    // Before 7.x-2.x maxlength was stored as "$subfield_maxlength".
    // This might lead to "Notice: Undefined index" while running update.php.
    if (empty($field['settings'][$subfield]['maxlength'])) {
      $field['settings'][$subfield]['maxlength'] = 255;
    }

    $type = $field['settings'][$subfield]['type'];
    $columns[$subfield] = array(
      'type' => $type == 'decimal' ? 'numeric' : $type,
      'not null' => FALSE,
      'description' => ucfirst($subfield) . ' subfield value.',
    );

    switch ($field['settings'][$subfield]['type']) {
      case 'varchar':
        $columns[$subfield]['length'] = $field['settings'][$subfield]['maxlength'];
        break;

      case 'text':
        $columns[$subfield]['size'] = 'big';
        break;

      case 'int':
      case 'float':
        $columns[$subfield]['size'] = $field['settings'][$subfield]['size'];
        break;

      case 'decimal':
        $columns[$subfield]['precision'] = $field['settings'][$subfield]['precision'];
        $columns[$subfield]['scale'] = $field['settings'][$subfield]['scale'];
        break;
    }
  }

  return array('columns' => $columns);
}

/**
 * Fix fields settings.
 */
function double_field_update_7201() {

  $query = db_select('field_config', 'fc', array('fetch' => PDO::FETCH_ASSOC))
    ->fields('fc')
    ->condition('type', 'double_field');
  foreach ($query->execute() as $field) {

    $field_data = unserialize($field['data']);
    foreach (array('first', 'second') as $subfield) {
      $field_data['settings'][$subfield]['maxlength'] = $field_data['settings'][$subfield . '_maxlength'];
      unset($field_data['settings'][$subfield . '_maxlength']);
    }
    $field_data['indexes'] = array();

    // Save the field data.
    $query = db_update('field_config')
      ->condition('id', $field['id'])
      ->fields(array('data' => serialize($field_data)))
      ->execute();

    $query = db_select('field_config_instance', 'fc', array('fetch' => PDO::FETCH_ASSOC))
      ->fields('fc')
      ->condition('field_id', $field['id']);
    foreach ($query->execute() as $instance) {
      $instance_data = unserialize($instance['data']);

      // Update widget type and widget settings.
      $instance_data['widget']['type'] = 'textfield_&_textfield';
      $widget_info = double_field_field_widget_info();
      foreach (array('first', 'second') as $subfield) {
        $old_settings = $instance_data['widget']['settings'][$subfield];
        $instance_data['widget']['settings'][$subfield] = $widget_info['textfield_&_textfield']['settings'][$subfield];
        $instance_data['widget']['settings'][$subfield]['textfield']['size'] = $old_settings['size'];
        unset($old_settings['size']);
        $instance_data['widget']['settings'][$subfield]['general'] = $old_settings;
      }

      // Update formatter type and formatter settings.
      $formatters = double_field_field_formatter_info();
      foreach ($instance_data['display'] as &$display) {
        switch ($display['type']) {
          case 'double_field_inline':
            $display['type'] = 'double_field_unformatted_list';
            $display['settings']['style'] = 'inline';
            break;

          case 'double_field_block':
            $display['type'] = 'double_field_unformatted_list';
            $display['settings']['style'] = 'block';
            break;

          case 'double_field_fieldset':
            $display['type'] = 'double_field_fieldset';
            break;

        }
        foreach (array('first', 'second') as $subfield) {
          $display['settings'][$subfield] = array_merge(
            $formatters[$display['type']]['settings'][$subfield],
            $display['settings'][$subfield]
          );
        }
      }

      // Save the instance data.
      $query = db_update('field_config_instance')
        ->condition('id', $instance['id'])
        ->fields(array('data' => serialize($instance_data)))
        ->execute();
    }
  }

}
